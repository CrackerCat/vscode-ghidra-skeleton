// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
apply plugin: 'java'
apply plugin: 'eclipse'
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------
def docs = file(ghidraInstallDir+'/docs/GhidraAPI_javadoc.zip')

repositories { mavenCentral() }

dependencies {
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "org.jmockit:jmockit:1.44"
	testCompile "junit:junit:4.12"
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Configurations', include: "**/*.jar")
	compileOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Extensions', include: "**/*.jar")
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Framework', include: "**/*.jar")
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Features', include: "**/*.jar")
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Processors', include: "**/*.jar")
	compileOnly fileTree(dir: 'lib', include: '*.jar')

	// these are included with ghidra and handy to have for debugging
	// these may be removed

	// Framework/Generic
	runtimeOnly "cglib:cglib-nodep:2.2"
	runtimeOnly "org.apache.commons:commons-collections4:4.1"
	runtimeOnly "commons-io:commons-io:2.6"
	runtimeOnly "org.apache.commons:commons-lang3:3.9"
	runtimeOnly "com.google.guava:guava:19.0"
	runtimeOnly "org.jdom:jdom-legacy:1.1.3"
	runtimeOnly "org.apache.logging.log4j:log4j-api:2.8.2"
	runtimeOnly "org.apache.logging.log4j:log4j-core:2.8.2"

	// Framework/Docking
	runtimeOnly "javax.help:javahelp:2.0.05"
	runtimeOnly "net.java.dev.timingframework:timingframework:1.0"

	// Framework/FileSystem
	runtimeOnly "ch.ethz.ganymed:ganymed-ssh2:262"

	// Framework/Graph
	runtimeOnly "net.sf.jung:jung-api:2.1.1"
	runtimeOnly "net.sf.jung:jung-algorithms:2.1.1"
	runtimeOnly "net.sf.jung:jung-graph-impl:2.1.1"
	runtimeOnly "net.sf.jung:jung-visualization:2.1.1"

	// Framework/Project
	runtimeOnly "org.apache.commons:commons-compress:1.18"

	// Framework/SoftwareModeling
	runtimeOnly "org.antlr:antlr:3.5.2"
	runtimeOnly "org.antlr:antlr-runtime:3.5.2"
	runtimeOnly "msv:isorelax:20050913"
	runtimeOnly "msv:msv:20050913"
	runtimeOnly "msv:relaxngDatatype:20050913"
	runtimeOnly "msv:xsdlib:20050913"

	// Features/FileFormats
	runtimeOnly "org.ow2.asm:asm-debug-all:4.1"
	/* AXMLPrinter2 */
	//runtimeOnly "org.smali:baksmali:1.4.0"
	//runtimeOnly "com.googlecode.d2j:dex-ir:2.0"
	//runtimeOnly "org.smali:dexlib:1.4.0"
	//runtimeOnly "com.googlecode.d2j:dex-reader:2.0"
	//runtimeOnly "com.googlecode.d2j:dex-reader-api:2.0"
	//runtimeOnly "com.googlecode.d2j:dex-translator:2.0"
	runtimeOnly "net.sf.sevenzipjbinding:sevenzipjbinding:9.20-2.00beta"
	runtimeOnly "net.sf.sevenzipjbinding:sevenzipjbinding-all-platforms:9.20-2.00beta"
	//runtimeOnly "org.smali:util:1.4.0"

	// Features/Python
	runtimeOnly "org.python:jython-standalone:2.7.1"
}

sourceSets {
	main {
		java {
			srcDirs = ['ghidra_scripts']
			include '*.java'
		}
	}
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse.classpath.file.whenMerged {
	File javaDoc = new File(ghidraInstallDir+"/docs/GhidraAPI_javadoc.zip");
	for (entry in entries) {
		if (entry.path.contains('jar')) {
			File folder = new File(entry.getPath()).getParentFile();
			for (File file : folder.listFiles()) {
				if (file.getName().endsWith(".zip")) {
					if (file.getName().contains("-src")) {
						entry.setSourcePath(it.fileReference(file));
					}
					entry.setJavadocPath(it.fileReference(javaDoc));
				}
			}
		}
	}
}

task dummy {
	println(sourceSets.main.allSource.srcDirs)
}
